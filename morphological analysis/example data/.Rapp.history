rr
cultures <- unique(rr$cultures)
i=1
ss <- subset(rr, rr$culture==cultures[i]
ss <- subset(rr, rr$culture==cultures[i])
cultures[i]
cultures <- unique(rr$culture)
i=1
ss <- subset(rr, rr$culture==cultures[i])
ss
plot(log10(part.dens) ~ time.h, data=rr)
plot(log10(part.dens) ~ time.h, data=ss)
points(log10(real.N1) ~ time.h, data=ss)
points(log10(real.N1) ~ time.h, data=ss, pch=3)
plot(log10(part.dens) ~ time.h, data=ss)#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(0, 10))
points(log10(real.N1) ~ time.h, data=ss, pch=3)
points(log10(real.N2) ~ time.h, data=ss, pch=3)
points(log10(real.N3) ~ time.h, data=ss, pch=3)
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))
points(log10(real.N1) ~ time.h, data=ss, pch=3)
points(log10(real.N2) ~ time.h, data=ss, pch=3)
points(log10(real.N3) ~ time.h, data=ss, pch=3)
ss[,-1]
ss
points(log10(real.N1) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6), col=as.factor(ss$file))
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6), col=as.factor(ss$file))#
points(log10(real.N1) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N2) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N3) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))
par(cex=2)
par(cex=2)#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6), col=as.factor(ss$file))#
points(log10(real.N1) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N2) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N3) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))
par(cex.pch=2)#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6), col=as.factor(ss$file))#
points(log10(real.N1) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N2) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N3) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))
par(pch.cex=2)
par(cex=2)
par(cex=2)#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6), col=as.factor(ss$file))#
points(log10(real.N1) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N2) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))#
points(log10(real.N3) ~ time.h, data=ss, pch=3, col=as.factor(ss$file))
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)
plot(log10(part.dens) ~ log10(real.N1), data=ss)
abline(0,1)
layout(matrix(1:2, 1, 2)
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))
points(log10(real.N1) ~ time.h, data=ss, pch=3)
points(log10(real.N2) ~ time.h, data=ss, pch=3)
points(log10(real.N3) ~ time.h, data=ss, pch=3)
plot(log10(part.dens) ~ log10(real.N1), data=ss)
abline(0,1)
layout(matrix(1:2, 1, 2))#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss)#
abline(0,1)
layout(matrix(1:10, 5, 2))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss)#
abline(0,1)#
)
cultures <- unique(rr$culture)#
layout(matrix(1:10, 5, 2))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss)#
abline(0,1)#
}
layout(matrix(1:10, 5, 2, byrow=T))
i=1
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss)#
abline(0,1)#
}
par(cex=1)
cultures <- unique(rr$culture)#
layout(matrix(1:10, 5, 2, byrow=T))#
par(cex=1)#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss)#
abline(0,1)#
}
cultures <- unique(rr$culture)#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss)#
abline(0,1)#
}
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))
abline(0,1)
cultures <- unique(rr$culture)#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}
ss
mtext(1, text=ss$culture[1])
mtext(3, text=ss$culture[1])
pdf("~/Desktop/part.counter.check.pdf", paper="a4l")
?pdf
pdf("~/Desktop/part.counter.check.pdf", paper="a4r")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
pdf("~/Desktop/part.counter.check.pdf", paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
i=1
ss <- subset(rr, rr$culture==cultures[i])
ss
rr <- data.frame(file=ijout.files,#
				 mean.parts=mean.parts)#
#
files1 <- substr(as.character(rr$file), 1, nchar(as.character(rr$file))-6)#
files2 <- substr(as.character(file.sample.info$filename), 1, nchar(as.character(file.sample.info$filename))-4)#
#
## put the sample info into the dataset#
rr$volume <- file.sample.info$volume.ml[match(files1, files2)]#
rr$real.N1 <- file.sample.info$real.density1[match(files1, files2)]#
rr$real.N2 <- file.sample.info$real.density2[match(files1, files2)]#
rr$real.N3 <- file.sample.info$real.density3[match(files1, files2)]#
rr$culture <- file.sample.info$culture[match(files1, files2)]#
rr$time.h <- file.sample.info$time.h[match(files1, files2)]#
rr$dilution <- file.sample.info$dilution[match(files1, files2)]
rr
file.sample.info$dilution[match(files1, files2)]
file.sample.info$dilution
file.sample.info
rr$dilution <- file.sample.info$dillution[match(files1, files2)]
str(rr)
rr$dilution[rr$dilution==0] = 1
rr
put the sample info into the dataset#
rr$volume <- file.sample.info$volume.ml[match(files1, files2)]#
rr$real.N1 <- file.sample.info$real.density1[match(files1, files2)]#
rr$real.N2 <- file.sample.info$real.density2[match(files1, files2)]#
rr$real.N3 <- file.sample.info$real.density3[match(files1, files2)]#
rr$culture <- file.sample.info$culture[match(files1, files2)]#
rr$time.h <- file.sample.info$time.h[match(files1, files2)]#
rr$dilution <- file.sample.info$dillution[match(files1, files2)]#
#
rr$dilution[rr$dilution==0] = 1#
#
rr <- transform(rr, part.dens=mean.parts/volume*dilution)#
str(rr)#
#
plot(log10(part.dens) ~ log10(real.N1), data=rr)#
abline(0,1)
str(rr)#
#
cultures <- unique(rr$culture)#
#
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 6))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
i=1
ss <- subset(rr, rr$culture==cultures[i])
ss
ss[,-1]
ss[,c(-1, -7)]
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
rr <- transform(rr, part.dens=mean.parts/volume)#
str(rr)#
#
plot(log10(part.dens) ~ log10(real.N1), data=rr)#
abline(0,1)#
#
str(rr)#
#
cultures <- unique(rr$culture)#
#
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()#
ss[,c(-1, -7)]
i=1
rr$dilution[rr$dilution==0] = 1#
#
rr <- transform(rr, part.dens=mean.parts/volume)#
str(rr)#
#
plot(log10(part.dens) ~ log10(real.N1), data=rr)#
abline(0,1)#
#
str(rr)#
#
cultures <- unique(rr$culture)#
#
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
##for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
##}#
dev.off()#
ss[,c(-1, -7)]
rr <- transform(rr, part.dens=mean.parts/volume*dilution)#
rr <- transform(rr, real.N11=real.N1*dilution)#
rr <- transform(rr, real.N21=real.N2*dilution)#
rr <- transform(rr, real.N31=real.N3*dilution)#
str(rr)#
#
plot(log10(part.dens) ~ log10(real.N1), data=rr)#
abline(0,1)#
#
str(rr)#
#
cultures <- unique(rr$culture)#
#
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
##for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
##}#
dev.off()#
ss[,c(-1, -7)]
plot(log10(part.dens) ~ log10(real.N1), data=rr)
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
##for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N11) ~ time.h, data=ss, pch=3)#
points(log10(real.N21) ~ time.h, data=ss, pch=3)#
points(log10(real.N31) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
##}#
dev.off()
plot(log10(part.dens) ~ log10(real.N11), data=ss, xlim=c(1, 6), ylim=c(1, 6))
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N11) ~ time.h, data=ss, pch=3)#
points(log10(real.N21) ~ time.h, data=ss, pch=3)#
points(log10(real.N31) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N11), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
plot(log10(part.dens) ~ log10(real.N1), data=rr)
plot(log10(part.dens) ~ log10(real.N11), data=rr)
abline(0,1)
rr <- transform(rr, part.dens=mean.parts/volume*dilution)#
rr <- transform(rr, real.N11=real.N1)#
rr <- transform(rr, real.N21=real.N2)#
rr <- transform(rr, real.N31=real.N3)#
str(rr)#
#
plot(log10(part.dens) ~ log10(real.N11), data=rr)#
abline(0,1)#
#
str(rr)#
#
cultures <- unique(rr$culture)#
#
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N11) ~ time.h, data=ss, pch=3)#
points(log10(real.N21) ~ time.h, data=ss, pch=3)#
points(log10(real.N31) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N11), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
rr <- transform(rr, part.dens=mean.parts/volume*dilution)#
rr <- transform(rr, real.N11=real.N1*dilution)#
rr <- transform(rr, real.N21=real.N2*dilution)#
rr <- transform(rr, real.N31=real.N3*dilution)#
str(rr)#
#
plot(log10(part.dens) ~ log10(real.N11), data=rr)#
abline(0,1)#
#
str(rr)#
#
cultures <- unique(rr$culture)#
#
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N11) ~ time.h, data=ss, pch=3)#
points(log10(real.N21) ~ time.h, data=ss, pch=3)#
points(log10(real.N31) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N11), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
rm(list=ls())#
#
source('~/Desktop/ij.auto/ij.functions.r')#
## number of frames#
## ideally would get this from each video from within the imagej macro#
num.frames <- 125#
#
## lag for image subtraction#
subtract.lag <- 20#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/petri.test1"
file.sample.info <- read.delim(paste(vid.dir, "video.description.txt", sep="/"))
file.sample.info
MakeIJMacros(vid.dir)
RunIJMacros(vid.dir)
dd <- LoadIJOuts(vid.dir)
str(dd)
dd
num.slices <- 106#
## the macro file names#
all.files <- dir(path=vid.dir)#
ijout.files <- all.files[grep("ijout", all.files)]	#
#
## mean number of particles per slice (including zeros)#
mean.parts <- rep(NA, length(ijout.files))#
#
nn <- 3#
##for(nn in 1:length(ijout.files)) {#
#
dd <- read.delim(paste(vid.dir, ijout.files[nn], sep="//"))#
dd$X <- rep(ijout.files[nn], length(dd$X))
hist(log10(dd$Area))
dd
dd <- dd[dd$Area>300,]
dd
dd[,c("Area", "Major", "Minor", "Round", "Slice")]
plot(Area ~ Round, dd)
dd <- read.delim(paste(vid.dir, ijout.files[nn], sep="//"))
dd$X <- rep(ijout.files[nn], length(dd$X))
plot(Area ~ Round, dd)
dd <- LoadIJOuts(vid.dir)
str(dd)
xyplot(Area ~ Round | X, dd)
library(lattice)
xyplot(Area ~ Round | X, dd)
the macro file names#
all.files <- dir(path=vid.dir)#
ijout.files <- all.files[grep("ijout", all.files)]	#
#
## mean number of particles per slice (including zeros)#
mean.parts <- rep(NA, length(ijout.files))#
#
nn <- 1#
##for(nn in 1:length(ijout.files)) {#
#
dd <- read.delim(paste(vid.dir, ijout.files[nn], sep="//"))#
dd$X <- rep(ijout.files[nn], length(dd$X))#
## remove single pixel particles#
## 50 for #
##dd <- dd[dd$Area>300,]#
hist(log10(dd$Area))
dd[,c("Area", "Major", "Minor", "Round", "Slice")]
plot(Area ~ Round, dd)
?xyplot
xyplot(Area ~ Round | X, dd, scales=list(relation="free")
xyplot(Area ~ Round | X, dd, scales=list(relation="free"))
RunIJMacros(vid.dir)#
#
dd <- LoadIJOuts(vid.dir)#
##str(dd)#
##unique(dd$X)#
#
xyplot(Area ~ Round | X, dd, scales=list(relation="free"))
xyplot(Area ~ Round | X, dd, scales=list(relation="free"), layout=c(1,3))
xyplot(Area ~ Round | X, dd, scales=list(relation="free"), layout=c(3,1))
rm(list=ls())#
#
library(lattice)#
source('~/Desktop/ij.auto/ij.functions.r')#
## number of frames#
## ideally would get this from each video from within the imagej macro#
num.frames <- 125#
#
## lag for image subtraction#
subtract.lag <- 20#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/petri.test1"#
#
## read the file naming key#
file.sample.info <- read.delim(paste(vid.dir, "video.description.txt", sep="/"))#
#
##MakeIJMacros(vid.dir)#
#
##RunIJMacros(vid.dir)#
#
dd <- LoadIJOuts(vid.dir)#
##str(dd)#
##unique(dd$X)#
#
xyplot(Area ~ Round | X, dd, scales=list(relation="free"), layout=c(3,1))
xyplot(Major ~ Minor | X, dd, scales=list(relation="free"), layout=c(3,1))
xyplot(Area ~ Round | X, dd, scales=list(relation="free"), layout=c(3,1))
rm(list=ls())#
#
source('~/Desktop/ij.auto/ij.functions.r')#
## number of frames#
## ideally would get this from each video from within the imagej macro#
num.frames <- 125#
#
## lag for image subtraction#
subtract.lag <- 20#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/tet.expt.12.2012"#
#
## read the file naming key#
file.sample.info <- read.csv(paste(vid.dir, "file.sampl.info.tetexp2012.wosampling.csv", sep="/"))#
#
##MakeIJMacros(vid.dir)#
#
##RunIJMacros(vid.dir)
rm(list=ls())#
#
source('~/Desktop/ij.auto/ij.functions.r')#
## number of frames#
## ideally would get this from each video from within the imagej macro#
num.frames <- 125#
#
## lag for image subtraction#
subtract.lag <- 20#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/tet.expt.12.2012"#
#
## read the file naming key#
file.sample.info <- read.csv(paste(vid.dir, "file.sampl.info.tetexp2.csv", sep="/"))
file.sample.info <- read.csv(paste(vid.dir, "file.sampl.info2.csv", sep="/"))
rm(list=ls())#
#
source('~/Desktop/ij.auto/ij.functions.r')#
## number of frames#
## ideally would get this from each video from within the imagej macro#
num.frames <- 125#
#
## lag for image subtraction#
subtract.lag <- 20#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/tet.expt.12.2012"#
#
## read the file naming key#
file.sample.info <- read.csv(paste(vid.dir, "file.sampl.info2.csv", sep="/"))#
#
##MakeIJMacros(vid.dir)#
#
##RunIJMacros(vid.dir)#
#
##dd <- LoadIJOuts(vid.dir)#
##str(dd)#
##unique(dd$X)#
#
num.slices <- 106#
#
## the macro file names#
all.files <- dir(path=vid.dir)#
ijout.files <- all.files[grep("ijout", all.files)]	#
#
## mean number of particles per slice (including zeros)#
mean.parts <- rep(NA, length(ijout.files))#
#
##nn <- 3#
for(nn in 1:length(ijout.files)) {#
#
	dd <- read.delim(paste(vid.dir, ijout.files[nn], sep="//"))#
	dd$X <- rep(ijout.files[nn], length(dd$X))#
	## remove single pixel particles#
	## 50 for #
	dd <- dd[dd$Area>20,]#
	##hist(log10(dd$Area))#
	##dim(dd)#
#
	## maybe put in an adjustment for large areas, e.g., num.cells = ceiling(Area / average area)#
	agg <- aggregate(dd$X, list(file=dd$X, Slice=dd$Slice), length)#
	## check if any slices not in aggregation (i.e., some slices with no particles)#
	aa1 <- c(1:num.slices)[is.na(match(c(1:num.slices), agg$Slice))]#
	if(length(aa1)>0) {#
		aa2 <- data.frame(file=rep(agg$file[1], length(aa1)),#
						  Slice=aa1,#
						  x=rep(0, length(aa1)))#
		agg <- rbind(agg, aa2)#
	}#
	mean.parts[nn] <- mean(agg$x)#
}
rr <- data.frame(file=ijout.files,#
				 mean.parts=mean.parts)#
#
files1 <- substr(as.character(rr$file), 1, nchar(as.character(rr$file))-6)#
files2 <- substr(as.character(file.sample.info$filename), 1, nchar(as.character(file.sample.info$filename))-4)
rr
str(file.sample.info)
rr$volume <- file.sample.info$vol.vid[match(files1, files2)]
rr$real.N1 <- file.sample.info$count1[match(files1, files2)]
rr <- data.frame(file=ijout.files,#
				 mean.parts=mean.parts)#
#
files1 <- substr(as.character(rr$file), 1, nchar(as.character(rr$file))-6)#
files2 <- substr(as.character(file.sample.info$filename), 1, nchar(as.character(file.sample.info$filename))-4)#
#
str(file.sample.info)#
#
## put the sample info into the dataset#
rr$volume <- file.sample.info$vol.vid[match(files1, files2)]#
rr$dilution <- file.sample.info$dillution.vid[match(files1, files2)]#
#
rr$real.N1 <- file.sample.info$count1[match(files1, files2)]#
rr$real.N2 <- file.sample.info$count2[match(files1, files2)]#
rr$real.N3 <- file.sample.info$count3[match(files1, files2)]#
rr$real.N3 <- file.sample.info$vol.yves[match(files1, files2)]#
rr$real.N3 <- file.sample.info$dilution.yves[match(files1, files2)]#
rr$culture <- file.sample.info$culture[match(files1, files2)]#
rr$time.h <- file.sample.info$time.h[match(files1, files2)]
rr$dilution.yves[rr$dilution.yves==0] = 1
rr <- data.frame(file=ijout.files,#
				 mean.parts=mean.parts)#
#
files1 <- substr(as.character(rr$file), 1, nchar(as.character(rr$file))-6)#
files2 <- substr(as.character(file.sample.info$filename), 1, nchar(as.character(file.sample.info$filename))-4)#
#
str(file.sample.info)#
#
## put the sample info into the dataset#
rr$volume <- file.sample.info$vol.vid[match(files1, files2)]#
rr$dilution <- file.sample.info$dillution.vid[match(files1, files2)]#
#
rr$real.N1 <- file.sample.info$count1[match(files1, files2)]#
rr$real.N2 <- file.sample.info$count2[match(files1, files2)]#
rr$real.N3 <- file.sample.info$count3[match(files1, files2)]#
rr$real.N3 <- file.sample.info$vol.yves[match(files1, files2)]#
rr$real.N3 <- file.sample.info$dilution.yves[match(files1, files2)]#
rr$culture <- file.sample.info$culture[match(files1, files2)]#
rr$time.h <- file.sample.info$time.h[match(files1, files2)]#
#
rr$dilution.yves[rr$dilution.yves==0] = 1#
rr$dilution.vid[rr$dilution.vid==0] = 1
rr$dilution.yves
rr <- data.frame(file=ijout.files,#
				 mean.parts=mean.parts)#
#
files1 <- substr(as.character(rr$file), 1, nchar(as.character(rr$file))-6)#
files2 <- substr(as.character(file.sample.info$filename), 1, nchar(as.character(file.sample.info$filename))-4)#
#
str(file.sample.info)#
#
## put the sample info into the dataset#
rr$vol.vid <- file.sample.info$vol.vid[match(files1, files2)]#
rr$dilution.vid <- file.sample.info$dillution.vid[match(files1, files2)]#
#
rr$count1 <- file.sample.info$count1[match(files1, files2)]#
rr$count2 <- file.sample.info$count2[match(files1, files2)]#
rr$count3 <- file.sample.info$count3[match(files1, files2)]#
rr$vol.yves <- file.sample.info$vol.yves[match(files1, files2)]#
rr$dilution.yves <- file.sample.info$dilution.yves[match(files1, files2)]#
rr$culture <- file.sample.info$culture[match(files1, files2)]#
rr$time.h <- file.sample.info$time.h[match(files1, files2)]#
#
rr$dilution.yves[rr$dilution.yves==0] = 1#
rr$dilution.vid[rr$dilution.vid==0] = 1
file.sample.info$dillution.vid[match(files1, files2)]
rr$dilution.vid <- file.sample.info$dilution.vid[match(files1, files2)]
file.sample.info$dilution.vid[match(files1, files2)]
rr <- data.frame(file=ijout.files,#
				 mean.parts=mean.parts)#
#
files1 <- substr(as.character(rr$file), 1, nchar(as.character(rr$file))-6)#
files2 <- substr(as.character(file.sample.info$filename), 1, nchar(as.character(file.sample.info$filename))-4)#
#
str(file.sample.info)#
#
## put the sample info into the dataset#
rr$vol.vid <- file.sample.info$vol.vid[match(files1, files2)]#
rr$dilution.vid <- file.sample.info$dilution.vid[match(files1, files2)]#
#
rr$count1 <- file.sample.info$count1[match(files1, files2)]#
rr$count2 <- file.sample.info$count2[match(files1, files2)]#
rr$count3 <- file.sample.info$count3[match(files1, files2)]#
rr$vol.yves <- file.sample.info$vol.yves[match(files1, files2)]#
rr$dilution.yves <- file.sample.info$dilution.yves[match(files1, files2)]#
rr$culture <- file.sample.info$culture[match(files1, files2)]#
rr$time.h <- file.sample.info$time.h[match(files1, files2)]#
#
rr$dilution.yves[rr$dilution.yves==0] = 1#
rr$dilution.vid[rr$dilution.vid==0] = 1
str(rr)
rr <- transform(rr, part.dens=mean.parts/vol.vid*dilution.vid)#
rr <- transform(rr, real.N1=count1*dilution.yves/vol.yves)#
rr <- transform(rr, real.N2=count2*dilution.yves/vol.yves)#
rr <- transform(rr, real.N3=count3*dilution.yves/vol.yves)
str(rr)
plot(log10(part.dens) ~ log10(real.N1), data=rr)
abline(0,1)
plot(log2(part.dens) ~ log2(real.N1), data=rr)
plot(log2(part.dens) ~ log2(real.N1), data=rr,#
	xlim=c(4, 22), ylim=c(4,22))
abline(0,1)
plot(log2(part.dens) ~ log2(real.N1), data=rr,#
	xlim=c(4, 22), ylim=c(4,22), col=as.factor(culture))#
abline(0,1)
grid()
?grid
grid(10)
grid(20)
plot(log2(part.dens) ~ log2(real.N1), data=rr,#
	xlim=c(4, 22), ylim=c(4,22))#
abline(0,1)#
grid(20)
abline(h=1:30, col="grey")
abline(h=1:30, col="grey", lty="dotted")
plot(log2(part.dens) ~ log2(real.N1), data=rr,#
	xlim=c(4, 22), ylim=c(4,22))#
abline(0,1)#
abline(h=1:30, col="grey", lty="dotted")
abline(v=1:30, col="grey", lty="dotted")
plot(log2(part.dens) ~ log2(real.N1), data=rr,#
	xlim=c(4, 22), ylim=c(4,22))#
abline(0,1)#
abline(h=1:30, col="grey", lty="dotted")#
abline(v=1:30, col="grey", lty="dotted")
points(log2(part.dens) ~ log2(real.N1), data=rr)
plot(log2(part.dens) ~ log2(real.N1), data=rr,#
	xlim=c(4, 22), ylim=c(4,22), type="n")#
abline(0,1)#
abline(h=1:30, col="grey", lty="dotted")#
abline(v=1:30, col="grey", lty="dotted")
points(log2(part.dens) ~ log2(real.N1), data=rr)
i=1
cultures <- unique(rr$culture)
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N11) ~ time.h, data=ss, pch=3)#
points(log10(real.N21) ~ time.h, data=ss, pch=3)#
points(log10(real.N31) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N11), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)
layout(matrix(1:10, 5, 2, byrow=T))
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N11), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N12), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
plot(log10(part.dens) ~ log10(real.N1), data=ss, xlim=c(1, 6), ylim=c(1, 6))#
abline(0,1)#
}#
dev.off()
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
#
plot(log2(part.dens) ~ log2(real.N1), data=ss,#
	xlim=c(4, 22), ylim=c(4,22), type="n")#
abline(0,1)#
abline(h=1:30, col="grey", lty="dotted")#
abline(v=1:30, col="grey", lty="dotted")#
points(log2(part.dens) ~ log2(real.N1), data=rr)#
#
}#
dev.off()
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:10, 5, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
#
plot(log2(part.dens) ~ log2(real.N1), data=ss,#
	xlim=c(4, 22), ylim=c(4,22), type="n")#
abline(0,1)#
abline(h=1:30, col="grey", lty="dotted")#
abline(v=1:30, col="grey", lty="dotted")#
points(log2(part.dens) ~ log2(real.N1), data=ss)#
#
}
dev.off()
pdf("~/Desktop/part.counter.check.pdf", height=12, width=6, paper="a4")#
layout(matrix(1:8, 4, 2, byrow=T))#
i=1#
for(i in 1:length(cultures)) {#
ss <- subset(rr, rr$culture==cultures[i])#
plot(log10(part.dens) ~ time.h, data=ss, ylim=c(1, 8))#
points(log10(real.N1) ~ time.h, data=ss, pch=3)#
points(log10(real.N2) ~ time.h, data=ss, pch=3)#
points(log10(real.N3) ~ time.h, data=ss, pch=3)#
mtext(3, text=ss$culture[1])#
#
plot(log2(part.dens) ~ log2(real.N1), data=ss,#
	xlim=c(4, 22), ylim=c(4,22), type="n")#
abline(0,1)#
abline(h=1:30, col="grey", lty="dotted")#
abline(v=1:30, col="grey", lty="dotted")#
points(log2(part.dens) ~ log2(real.N1), data=ss)#
#
}#
dev.off()
LHS <- index.obs#
RHS <- paste("pois(lambda=", index.C1, "/100)",sep="")#
MEASUREMOD <- sapply(paste(LHS, RHS, sep="~"), as.formula)
Original implementation by Dylan Childs.#
## Subsequent modification by Owen Petchey#
#
require(pomp)#
#
## This function simulates a single step of the markov process (logistic growth)#
## via an Euler scheme. It is used by the euler.sim function supplied with the package#
STEPFUN <- function(t, x, params, delta.t, ...) {#
    params <- exp(params)#
    with(#
         as.list(params),#
         {            #
         ## collect up the appropriate replicates#
         C1 <- x[index.C1]#
         ## get the expected rate of change#
         dC.dt <- r1 * C1 * (k1 - C1 ) / k1#
         ## store the index vector we need#
         ii <- c(index.C1)#
         ## get the expected density#
         meanC <- C1 + dC.dt * delta.t#
         ## get the demographic variance#
         demogvar <- c(C1 * sigma1^2) * delta.t#
         ## simulate with demographic noise#
         x[ii] <- round(rnorm(n = length(ii), mean = meanC, sd = sqrt(demogvar)))#
         ## set any -ve densities to 0 and return the state vector#
         ifelse(x <= 0, 0, x)#
         })#
}#
#
# ## This is the likelihood function written by Dylan for the two species LV competition case,#
# ## we are not using it.#
# ## This function calculates the associated log-likelihood of a single step of the markov process#
# ## defined above...#
# ## N.B. - Not required by 'mif' below. I just put it here to satisfy myself I could build it#
# DENSFUN <- function(t1, t2, params, x1, x2, covars,...)#
# {#
    # params <- exp(params)#
    # with(#
         # as.list(params),#
         # {#
             # delta.t <- t2-t1#
             # if (t < invt) {#
                 # ## collect up the replicates#
                 # C1 <- x1[index.C1.i2]#
                 # C2 <- x1[index.C2.i1]#
                 # ## index vector#
                 # ii <- c(index.C1.i2, index.C2.1)#
                 # ## get the expected rate of change#
                 # dC.dt <- c(r1 * C1 * (k1 - C1) / k1,#
                            # r2 * C2 * (k2 - C2) / k2)#
             # } else {#
                 # ## collect up the replicates#
                 # C1 <- x1[index.C1]#
                 # C2 <- x1[index.C2]#
                 # ## index vector#
                 # ii <- c(index.C1, index.C2)#
                 # ## get the expected rate of change#
                 # dC.dt <- c(r1 * C1 * (k1 - C1 - C2 * beta12) / k1,#
                            # r2 * C2 * (k2 - C2 - C1 * beta21) / k2)#
             # }#
             # ## get the expected density#
             # expectdens <- c(C1, C2) + dC.dt * delta.t#
             # ## get the demographic variance#
             # demogvar <- c(C1 * sigma1^2, C2 * sigma2^2) * delta.t#
             # ## likelihood - first get the p(X < x2+0.5)#
             # L <- pnorm(x2[ii] + 0.5, mean = expectdens, sd = sqrt(demogvar))#
             # ## likelihood - then subtract p(X < x2-0.5) only if we did not transition to zero#
             # L <- ifelse(x2[ii] > 0,#
                         # L - pnorm(x2[ii] - 0.5, mean = expectdens, sd = sqrt(demogvar)), L)#
             # ## log likelihood or not#
             # if (log) sum(log(L)) else prod(L)#
         # })#
# }#
#
## This function calculates the vector field associated with the determinstic skeleton implied by the#
## model in STEPFUN#
## -> N.B. only needed to simulate the deterministic model, not required for the model fitting stuff#
SKELFUN <- function(x, t, params,...)#
{#
    params <- exp(params)#
    with(#
         as.list(params),#
         {#
             ## copy 'x' so that we get the names attibute#
             dC.dt <- x#
             ## collect up the replicates#
             C1 <- x[index.C1]#
             ## get the rates of change#
             dC.dt[index.C1] <- r1 * C1 * (k1 - C1) / k1#
             dC.dt#
         })#
}#
#
## This function initialises the system#
INITFUN <- function(params, t0, ...)#
{#
    params <- exp(params)#
    with(#
         as.list(params),#
         {#
             x0 <- rep(10, length(index.C1))#
             names(x0) <- index.C1#
             x0#
         })#
}#
####################################################################################################
## Below we build the pomp object, simulate from this, and fit to the simulated time series#
####################################################################################################
#
## *** Globals variables ***#
#
## number of replicates#
nrep <- 2#
## index vectors#
index.C1.i1 <- paste("C1.i1", 1:nrep, sep=".")#
#index.C1.i2 <- paste("C1.i2", 1:nrep, sep=".")#
index.C1    <- c(index.C1.i1)#
index.obs   <- paste("obs", index.C1, sep=".")#
#
## Define the measurement model as a list of formula objects. Alternatively, we could define a function.#
LHS <- index.obs#
RHS <- paste("pois(lambda=", index.C1, "/100)",sep="")#
MEASUREMOD <- sapply(paste(LHS, RHS, sep="~"), as.formula)
MEASUREMOD
emptydata <- matrix(0, nrow=length(index.C1), ncol=120/3)#
rownames(emptydata) <- index.obs#
#
## set up the pomp object#
compPomp <- pomp(data = emptydata,#
                 times = seq.int(fr=3,to=120,by=3), t0 = 0,#
                 rprocess = euler.sim(STEPFUN, delta.t = 0.1),#
                 skeleton = SKELFUN, skeleton.type = "vectorfield",#
                 measurement.model = MEASUREMOD,#
                 initializer = INITFUN#
                 )
set some 'reasonable' parameters#
params <- c(#
            r1=log(2)/(12/24), # Sp 1 - 12 hour generation time#
            k1=2000.0,         # Sp 1 - carrying capacity#
            sigma1=sqrt(2)#
            )#
## log the parameter set so that we can ensure positive constraint#
logpar <- log(params)
deterministic trajectory#
## -> Not related to the model fitting stuff#
## -> Just illustrates the use of pomp as a simulator#
## -> Serves as a quick sanity check#
detSimTimes <- seq(0,20,by=0.1)#
detTraj <- trajectory(compPomp, params=logpar, times=detSimTimes, t0=0, hmax=1/10)#
plot(detTraj["C1.i1.1",1,])
simulate the system n times -> returns a list of pomp objects#
compPomp <- simulate(compPomp, nsim=1, params=logpar, t0=0, times=seq(fr=3,to=20,by=1))#
## extract the first simulated pomp object and plot this#
## plot(compPomp)#
temp <- as(compPomp, "data.frame")#
plot(compPomp, type="b")
Testing activation energy estimation tools:#
#########################################################
# nls() with explicit Arrhenius model#
# vs#
# ml(log(parameter) ~ 1/(boltzman*kelvin))#
#########################################################
## Marco, 12/12/2012#
#########################################################
#
rm(list=ls())#
#
T.ref <- 20 + 273.15#
boltz <- 0.00008617343#
aer <- 0.67#
pre.exp <- 5#
celsius=8:29#
#
# Without noise:#
#
r=pre.exp * exp(aer*((celsius+273.15) - T.ref)/(boltz*(celsius+273.15)*T.ref))#
dummy<-data.frame(#
	celsius,r#
	)#
dummy$one_kt<- 1/(boltz*(celsius+273.15))#
dummy$kelvin<- celsius+273.15#
#
par(mfrow=c(1,2),cex=2.5)#
#
plot(r~celsius, data=dummy, type="l", col="blue",#
 	xlab="Temperature (°Celsius)", ylab="metabolic rates",#
 	lwd=3#
 	)#
#
plot(log(r)~one_kt, data=dummy,#
 	type="l", col="blue",#
 	xlab="1/k*T", ylab="log(metabolic rates)",#
 	lwd=3#
 	)#
#
##################
#
lm1 <- lm(log(r) ~ one_kt, data=dummy)#
summary(lm1)#
#
##################
#
startvals<-c(aer=0.5,pre.exp=2)#
nls1 <- nls(r ~ pre.exp * exp(aer*(kelvin - T.ref)/(boltz*kelvin*T.ref)),#
	start=list(aer=startvals[1], pre.exp=startvals[2]),#
	control = list(maxiter = 5000),#
	data=dummy#
	)#
#
# Interesting! It does not converge.#
# It seems MLMs cannot work with perfect data.#
###########################
# Noise added.#
# Test on 1000 datasets, all shifting from a perfect Arrhenius model by the same sd:#
#
T.ref <- 20 + 273.15#
boltz <- 0.00008617343#
aer <- 0.67#
pre.exp <- 5#
celsius=8:29#
one_kt=1/(boltz*(celsius+273.15))#
kelvin=celsius+273.15#
#
# Store the output here:#
#
aer.est<-data.frame(#
	lm.est=rep(NA,100),#
	nls.est=rep(NA,100)#
	)#
#
# to see how lond does this take:#
ptm <- proc.time()#
#
for (i in 1:1000){#
dummy<-data.frame(#
	celsius=celsius,#
	r=(pre.exp * exp(aer*(kelvin - T.ref)/(boltz*kelvin*T.ref)) + rnorm(n=length(celsius), mean=0, sd=0.5)),#
	one_kt=one_kt,#
	kelvin=kelvin#
	)#
lm1 <- lm(log(r) ~ one_kt, data=dummy)#
nls1 <- nls(r ~ pre.exp * exp(aer*(kelvin - T.ref)/(boltz*kelvin*T.ref)),#
	start=list(aer=1, pre.exp=1),#
	data=dummy#
	)#
#
aer.est[i,1] <- -(coef(lm1)[2])#
aer.est[i,2] <- coef(nls1)[1]#
}#
#
# Stop the clock#
proc.time() - ptm#
#
mean(aer.est[,1])#
mean(aer.est[,2])#
sd(aer.est[,1])#
sd(aer.est[,2])#
#
t.test(aer.est[,1],aer.est[,2])#
#
par(mfrow=c(1,2))#
hist(aer.est[,1], xlab="Activation energy", probability=F, main="Using lm()")#
hist(aer.est[,2], xlab="Activation energy", freq=TRUE, main="Using nls()")
par(mfrow=c(2,1))#
hist(aer.est[,1], xlab="Activation energy", probability=F, main="Using lm()", xlim=c(0.5,1.0))#
hist(aer.est[,2], xlab="Activation energy", freq=TRUE, main="Using nls()", xlim=c(0.5,1.0))
mean(aer.est[,2])
mean(aer.est[,1])
plot(aer.est[,1], aer.est[,2])
abline(0,1)
rm(list=ls())#
source('~/work/git/franco/ij.functions.r')#
#
## lag for image subtraction#
difference.lag <- 10#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/sub.test1"#
#
## read the file that gives the important information about each video#
file.sample.info <- read.csv(paste(vid.dir, "frank.video.description.txt", sep="/"))#
#
MakeIJMacros(vid.dir, difference.lag=difference.lag)
vid.dir
all.files <- dir(path=vid.dir)
ijmac.files <- all.files[grep("ijm", all.files)]
ijmac.files
i=1
paste("java -Xmx2048m -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ -macro ", vid.dir, "/", ijmac.files[i], "", sep="")
cmd <- paste("java -Xmx2048m -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ -macro ", vid.dir, "/", ijmac.files[i], "", sep="")
system(cmd)
rm(list=ls())#
source('~/work/git/franco/ij.functions.r')#
#
## lag for image subtraction#
difference.lag <- 10#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/sub.test1"#
#
## read the file that gives the important information about each video#
file.sample.info <- read.csv(paste(vid.dir, "frank.video.description.txt", sep="/"))#
#
MakeIJMacros(vid.dir, difference.lag=difference.lag)
the macro file names#
	all.files <- dir(path=vid.dir)#
	ijmac.files <- all.files[grep("ijm", all.files)]
i=1
cmd <- paste("java -Xmx4096m -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ -macro ", vid.dir, "/", ijmac.files[i], "", sep="")#
		system(cmd)
cmd <- paste("java -Xmx8192m -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ -macro ", vid.dir, "/", ijmac.files[i], "", sep="")#
		system(cmd)
This is the code that one runs in order to do the following:#
## 1. Create and run an imageJ macro for each of the video files in a specified directory/folder.#
##	  At present imageJ runs its particle analyser and saves the data to disk. #
## 2. Load into R the data produced by imagej.#
## 3. Some analyses of that data.#
rm(list=ls())#
source('~/work/git/franco/ij.functions.r')#
#
## lag for image subtraction#
difference.lag <- 10#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/sub.test1"#
#
## read the file that gives the important information about each video#
file.sample.info <- read.csv(paste(vid.dir, "frank.video.description.txt", sep="/"))#
#
MakeIJMacros(vid.dir, difference.lag=difference.lag)
the macro file names#
	all.files <- dir(path=vid.dir)#
	ijmac.files <- all.files[grep("ijm", all.files)]
ijmac.files
i=1
cmd <- paste("java -Xmx8192m -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ -macro ", vid.dir, "/", ijmac.files[i], "", sep="")#
		system(cmd)
This is the code that one runs in order to do the following:#
## 1. Create and run an imageJ macro for each of the video files in a specified directory/folder.#
##	  At present imageJ runs its particle analyser and saves the data to disk. #
## 2. Load into R the data produced by imagej.#
## 3. Some analyses of that data.#
rm(list=ls())#
source('~/work/git/franco/ij.functions.r')#
#
## lag for image subtraction#
difference.lag <- 10#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/sub.test1"#
#
## read the file that gives the important information about each video#
file.sample.info <- read.csv(paste(vid.dir, "frank.video.description.txt", sep="/"))#
#
MakeIJMacros(vid.dir, difference.lag=difference.lag)
This is the code that one runs in order to do the following:#
## 1. Create and run an imageJ macro for each of the video files in a specified directory/folder.#
##	  At present imageJ runs its particle analyser and saves the data to disk. #
## 2. Load into R the data produced by imagej.#
## 3. Some analyses of that data.#
rm(list=ls())#
source('~/work/git/franco/ij.functions.r')#
#
## lag for image subtraction#
difference.lag <- 10#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/sub.test1"#
#
## read the file that gives the important information about each video#
file.sample.info <- read.csv(paste(vid.dir, "frank.video.description.txt", sep="/"))#
#
MakeIJMacros(vid.dir, difference.lag=difference.lag)
This is the code that one runs in order to do the following:#
## 1. Create and run an imageJ macro for each of the video files in a specified directory/folder.#
##	  At present imageJ runs its particle analyser and saves the data to disk. #
## 2. Load into R the data produced by imagej.#
## 3. Some analyses of that data.#
rm(list=ls())#
source('~/work/git/franco/ij.functions.r')#
#
## lag for image subtraction#
difference.lag <- 10#
#
## the directory in which the videos are stored#
vid.dir <- "/Users/owenpetchey/Desktop/sub.test1"#
#
## read the file that gives the important information about each video#
file.sample.info <- read.csv(paste(vid.dir, "frank.video.description.txt", sep="/"))#
#
MakeIJMacros(vid.dir, difference.lag=difference.lag)
the macro file names#
	all.files <- dir(path=vid.dir)#
	ijmac.files <- all.files[grep("ijm", all.files)]
i
i=1
cmd <- paste("java -Xmx8192m -jar /Applications/ImageJ/ImageJ64.app/Contents/Resources/Java/ij.jar -ijpath /Applications/ImageJ -macro ", vid.dir, "/", ijmac.files[i], "", sep="")#
		system(cmd)
rm(list=ls())#
#
## This code reads in particle information previously obtained via imagej.#
## The data files are the six csv files in the same directory as this file.#
## You need to set this to point to where your copy of the folder is...#
#
setwd("~/work/git/franco/analysis/exampledatafiles")#
files <- files[grep(".csv", files)]#
#
fnames <- c("Colpidium1", "Colpidium2", "Paramecium1", "Paramecium2", "Both1", "Both2")#
species <- c("Colpidium", "Colpidium", "Paramecium", "Paramecium", "Both1", "Both2")#
colrz1 <- c("blue", "blue", "red", "red", "green", "green")#
## first file#
tt <- read.csv(files[1])#
tt$Treatment <- rep(fnames[1], length(tt[,1]))#
tt$Species <- rep(species[1], length(tt[,1]))#
dd <- tt
setwd("~/work/git/franco/analysis/exampledata")
files <- files[grep(".csv", files)]
files <- dir()
files <- files[grep(".csv", files)]
fnames <- c("Colpidium1", "Colpidium2", "Paramecium1", "Paramecium2", "Both1", "Both2")
species <- c("Colpidium", "Colpidium", "Paramecium", "Paramecium", "Both1", "Both2")
colrz1 <- c("blue", "blue", "red", "red", "green", "green")
tt <- read.csv(files[1])
tt$Treatment <- rep(fnames[1], length(tt[,1]))
tt$Species <- rep(species[1], length(tt[,1]))
dd <- tt
for(i in 2:length(files)) {#
	tt <- read.csv(files[i])#
	tt$Treatment <- rep(fnames[i], length(tt[,1]))#
	tt$Species <- rep(species[i], length(tt[,1]))#
	dd <- rbind(dd, tt)#
}#
str(dd)
plot(table(dd$Slice[dd$Treatment=="Colpidium1"]),#
	# xlab="Frame", ylab="Number of particles")#
# matplot(t(table(dd$Treatment, dd$Slice)),#
	# xlab="Frame", ylab="Number of particles",#
	# type="b", pch=19)#
#
library(lattice)
all <- cbind(dd$Major, dd$Minor, dd$Area, dd$Round, dd$Circ.)#
pp <- prcomp(scale(all))
library(nnet)#
for.nn <- c("Colpidium", "Paramecium")#
fnn <- !is.na(match(dd$Species, for.nn))#
fnn <- dd[fnn,]#
#
train <- cbind(fnn$Major, fnn$Minor, fnn$Area, fnn$Round, fnn$Circ.)#
target <- class.ind(fnn[,"Species"])#
samp <- sample(1:length(train[,1]), length(train[,1])/2)#
no.samp <- c(1:length(train[,1]))[-samp]#
nn <- nnet(train[samp,], target[samp,], size = 4, rang = 0.1,#
            decay = 5e-4, maxit = 200)#
test.cl <- function(true, pred) {#
    true <- max.col(true)#
    cres <- max.col(pred)#
    table(true, cres)#
}#
test.cl(target[no.samp,], predict(nn, train[no.samp,]))#
#
pred <- c("Colpidium", "Paramecium")[max.col(predict(nn, train[no.samp,]))]#
true <- fnn[no.samp,"Species"]#
colr <- ifelse(pred=="Colpidium" & true=="Colpidium", 1,#
	ifelse(pred=="Paramecium" & true=="Colpidium", 3,#
	ifelse(pred=="Paramecium" & true=="Paramecium", 2,#
	4)))#
# layout(matrix(1:2, 1, 2))#
# plot(pp$x[samp,1], pp$x[samp,2],#
	# col=as.numeric(as.factor(dd[samp,"Species"])),#
	# pch=19, cex=0.2,#
	# xlab="PCA1", ylab="PCA2")#
# plot(pp$x[no.samp,1], pp$x[no.samp,2],#
	# col=colr,#
	# pch=19, cex=0.2,#
	# xlab="PCA1", ylab="PCA2")#
# test.cl(target[-samp,], predict(nn, train[-samp,]))#
## now train again on all of the single species data#
nn <- nnet(train, target, size = 2, rang = 0.1,#
            decay = 5e-4, maxit = 200)#
for.nn2 <- c("Both1", "Both2")#
fnn2 <- !is.na(match(dd$Species, for.nn2))#
fnn2 <- dd[fnn2,]#
test <- cbind(fnn2$Major, fnn2$Minor, fnn2$Area, fnn2$Round, fnn2$Circ.)#
ppp <- predict(nn, test)#
##hist(ppp)#
fnn2$pred <- c("Colpidium", "Paramecium")[max.col(ppp)]#
rez1 <- apply(t(table(fnn2$pred, fnn2$Slice, fnn2$Species)[,10:126, 1]),2,mean)#
rez2 <- apply(t(table(fnn2$pred, fnn2$Slice, fnn2$Species)[,10:126, 2]),2,mean)#
train.pp <- t(t(pp$rotation) %*% t(scale(train))) #
test.pp <- t(t(pp$rotation) %*% t(scale(test)))#
#
layout(matrix(1:3, 1, 3))#
plot(train.pp[,1], train.pp[,2],#
	col=as.numeric(as.factor(fnn[,"Species"])),#
	pch=19, cex=0.2,#
	xlab="PCA1", ylab="PCA2")#
title("Training dataset")#
legend("topright", legend=c("Colpidium", "Paramecium"),#
	pch=19, col=c("black", "red"), cex=0.5)#
plot(train.pp[,1], train.pp[,2],#
	col=as.numeric(as.factor(fnn[,"Species"])),#
	pch=19, cex=0.2,#
	xlab="PCA1", ylab="PCA2")#
points(test.pp[,1:2], col=as.numeric(as.factor(fnn2$pred))+2, cex=0.2)#
legend("topright", legend=c("Colp. prediction", "Para. prediction"),#
	pch=19, col=c(3, 4), cex=0.5)#
title(paste(length(ppp[,1]), "of", sum(apply(ppp, 1, max)>0.9), "\nclassifications > 90%"))#
text(-3.4, -4, labels=paste("Test vid5"), adj=0)#
text(-3.4, -5, labels=paste("Num. Colp =", round(rez1[1], 1)), adj=0)#
text(-3.4, -6, labels=paste("Num. Para =", round(rez1[2], 1)), adj=0)#
text(1, -4, labels=paste("Test vid6"), adj=0)#
text(1, -5, labels=paste("Num. Colp =", round(rez2[1], 1)), adj=0)#
text(1, -6, labels=paste("Num. Para =", round(rez2[2], 1)), adj=0)#
fnn2$pred1 <- c("Colpidium", "Paramecium")[max.col(ppp)]#
fnn2$pred1 <- ifelse(apply(ppp, 1, max)>0.9, fnn2$pred1, "zzz")#
#
plot(train.pp[,1], train.pp[,2],#
	col=as.numeric(as.factor(fnn[,"Species"])),#
	pch=19, cex=0.2,#
	xlab="PCA1", ylab="PCA2")#
points(test.pp[,1:2], col=as.numeric(as.factor(fnn2$pred1))+2, cex=0.2)#
legend("topright", legend=c("Colp. prediction", "Para. prediction", "Not sure"),#
	pch=19, col=c(3, 4, 5), cex=0.5)#
##title(paste(length(ppp[,1]), "of", sum(apply(ppp, 1, max)>0.9), "\nclassifications > 90%"))#
#
rez3 <- apply(t(table(fnn2$pred1, fnn2$Slice, fnn2$Species)[,10:126, 1]),2,mean)#
rez4 <- apply(t(table(fnn2$pred1, fnn2$Slice, fnn2$Species)[,10:126, 2]),2,mean)#
#
text(-3.4, -4, labels=paste("Test vid5"), adj=0)#
text(-3.4, -5, labels=paste("Num. Colp =", round(rez3[1], 1)), adj=0)#
text(-3.4, -6, labels=paste("Num. Para =", round(rez3[2], 1)), adj=0)#
text(-3.4, -7, labels=paste("Not sure =", round(rez3[3], 1)), adj=0)#
text(1, -4, labels=paste("Test vid6"), adj=0)#
text(1, -5, labels=paste("Num. Colp =", round(rez4[1], 1)), adj=0)#
text(1, -6, labels=paste("Num. Para =", round(rez4[2], 1)), adj=0)#
text(1, -7, labels=paste("Not sure =", round(rez4[3], 1)), adj=0)
rm(list=ls())#
#
setwd("~/work/git/franco/analysis/exampledata")#
#
files <- dir()#
files <- files[grep(".csv", files)]#
#
fnames <- c("Colpidium1", "Colpidium2", "Paramecium1", "Paramecium2", "Both1", "Both2")#
species <- c("Colpidium", "Colpidium", "Paramecium", "Paramecium", "Both1", "Both2")#
colrz1 <- c("blue", "blue", "red", "red", "green", "green")#
## first file#
tt <- read.csv(files[1])#
tt$Treatment <- rep(fnames[1], length(tt[,1]))#
tt$Species <- rep(species[1], length(tt[,1]))#
dd <- tt#
#
for(i in 2:length(files)) {#
	tt <- read.csv(files[i])#
	tt$Treatment <- rep(fnames[i], length(tt[,1]))#
	tt$Species <- rep(species[i], length(tt[,1]))#
	dd <- rbind(dd, tt)#
}#
str(dd)#
# plot(table(dd$Slice[dd$Treatment=="Colpidium1"]),#
	# xlab="Frame", ylab="Number of particles")#
# matplot(t(table(dd$Treatment, dd$Slice)),#
	# xlab="Frame", ylab="Number of particles",#
	# type="b", pch=19)#
#
library(lattice)
rm(list=ls())#
#
setwd("~/work/git/franco/analysis/exampledata")#
#
files <- dir()#
files <- files[grep(".csv", files)]#
#
fnames <- c("Colpidium1", "Colpidium2", "Paramecium1", "Paramecium2", "Both1", "Both2")#
species <- c("Colpidium", "Colpidium", "Paramecium", "Paramecium", "Both1", "Both2")#
colrz1 <- c("blue", "blue", "red", "red", "green", "green")#
## first file#
tt <- read.csv(files[1])#
tt$Treatment <- rep(fnames[1], length(tt[,1]))#
tt$Species <- rep(species[1], length(tt[,1]))#
dd <- tt#
#
for(i in 2:length(files)) {#
	tt <- read.csv(files[i])#
	tt$Treatment <- rep(fnames[i], length(tt[,1]))#
	tt$Species <- rep(species[i], length(tt[,1]))#
	dd <- rbind(dd, tt)#
}#
str(dd)#
# plot(table(dd$Slice[dd$Treatment=="Colpidium1"]),#
	# xlab="Frame", ylab="Number of particles")#
# matplot(t(table(dd$Treatment, dd$Slice)),#
	# xlab="Frame", ylab="Number of particles",#
	# type="b", pch=19)#
#
library(lattice)#
#
# histogram( ~ Area | Species, data=dd, layout=c(1,4))#
#
# layout(matrix(1:4, 2, 2))#
# dd.sub <- subset(dd, !is.na(match(Treatment, c("Colpidium1", "Colpidium2", "Paramecium1", "Paramecium2"))))#
# plot(Major ~ Minor, col=colrz1[match(dd.sub$Treatment, fnames)],#
	# data=dd.sub, pch=19, cex=0.2)#
# legend("topright", legend=c("Colpidium", "Paramecium"), pch=1, col=c("blue", "red"))#
# plot(Major ~ Round, col=colrz1[match(dd.sub$Treatment, fnames)],#
	# data=dd.sub, pch=19, cex=0.2)#
# legend("topright", legend=c("Colpidium", "Paramecium"), pch=1, col=c("blue", "red"))#
# plot(Circ. ~ Round, col=colrz1[match(dd.sub$Treatment, fnames)],#
	# data=dd.sub, pch=19, cex=0.2)#
# legend("topleft", legend=c("Colpidium", "Paramecium"), pch=1, col=c("blue", "red"))#
# plot(Area ~ Round, col=colrz1[match(dd.sub$Treatment, fnames)],#
	# data=dd.sub, pch=19, cex=0.2)#
# legend("topleft", legend=c("Colpidium", "Paramecium"), pch=1, col=c("blue", "red"))#
all <- cbind(dd$Major, dd$Minor, dd$Area, dd$Round, dd$Circ.)#
pp <- prcomp(scale(all))#
library(nnet)#
for.nn <- c("Colpidium", "Paramecium")#
fnn <- !is.na(match(dd$Species, for.nn))#
fnn <- dd[fnn,]#
#
train <- cbind(fnn$Major, fnn$Minor, fnn$Area, fnn$Round, fnn$Circ.)#
target <- class.ind(fnn[,"Species"])#
samp <- sample(1:length(train[,1]), length(train[,1])/2)#
no.samp <- c(1:length(train[,1]))[-samp]#
nn <- nnet(train[samp,], target[samp,], size = 4, rang = 0.1,#
            decay = 5e-4, maxit = 200)#
test.cl <- function(true, pred) {#
    true <- max.col(true)#
    cres <- max.col(pred)#
    table(true, cres)#
}#
test.cl(target[no.samp,], predict(nn, train[no.samp,]))#
#
pred <- c("Colpidium", "Paramecium")[max.col(predict(nn, train[no.samp,]))]#
true <- fnn[no.samp,"Species"]#
colr <- ifelse(pred=="Colpidium" & true=="Colpidium", 1,#
	ifelse(pred=="Paramecium" & true=="Colpidium", 3,#
	ifelse(pred=="Paramecium" & true=="Paramecium", 2,#
	4)))#
# layout(matrix(1:2, 1, 2))#
# plot(pp$x[samp,1], pp$x[samp,2],#
	# col=as.numeric(as.factor(dd[samp,"Species"])),#
	# pch=19, cex=0.2,#
	# xlab="PCA1", ylab="PCA2")#
# plot(pp$x[no.samp,1], pp$x[no.samp,2],#
	# col=colr,#
	# pch=19, cex=0.2,#
	# xlab="PCA1", ylab="PCA2")#
# test.cl(target[-samp,], predict(nn, train[-samp,]))#
## now train again on all of the single species data#
nn <- nnet(train, target, size = 2, rang = 0.1,#
            decay = 5e-4, maxit = 200)#
for.nn2 <- c("Both1", "Both2")#
fnn2 <- !is.na(match(dd$Species, for.nn2))#
fnn2 <- dd[fnn2,]#
test <- cbind(fnn2$Major, fnn2$Minor, fnn2$Area, fnn2$Round, fnn2$Circ.)#
ppp <- predict(nn, test)#
##hist(ppp)#
fnn2$pred <- c("Colpidium", "Paramecium")[max.col(ppp)]#
rez1 <- apply(t(table(fnn2$pred, fnn2$Slice, fnn2$Species)[,10:126, 1]),2,mean)#
rez2 <- apply(t(table(fnn2$pred, fnn2$Slice, fnn2$Species)[,10:126, 2]),2,mean)#
train.pp <- t(t(pp$rotation) %*% t(scale(train))) #
test.pp <- t(t(pp$rotation) %*% t(scale(test)))#
#
layout(matrix(1:3, 1, 3))#
plot(train.pp[,1], train.pp[,2],#
	col=as.numeric(as.factor(fnn[,"Species"])),#
	pch=19, cex=0.2,#
	xlab="PCA1", ylab="PCA2")#
title("Training dataset")#
legend("topright", legend=c("Colpidium", "Paramecium"),#
	pch=19, col=c("black", "red"), cex=0.5)#
plot(train.pp[,1], train.pp[,2],#
	col=as.numeric(as.factor(fnn[,"Species"])),#
	pch=19, cex=0.2,#
	xlab="PCA1", ylab="PCA2")#
points(test.pp[,1:2], col=as.numeric(as.factor(fnn2$pred))+2, cex=0.2)#
legend("topright", legend=c("Colp. prediction", "Para. prediction"),#
	pch=19, col=c(3, 4), cex=0.5)#
title(paste(length(ppp[,1]), "of", sum(apply(ppp, 1, max)>0.9), "\nclassifications > 90%"))#
text(-3.4, -4, labels=paste("Test vid5"), adj=0)#
text(-3.4, -5, labels=paste("Num. Colp =", round(rez1[1], 1)), adj=0)#
text(-3.4, -6, labels=paste("Num. Para =", round(rez1[2], 1)), adj=0)#
text(1, -4, labels=paste("Test vid6"), adj=0)#
text(1, -5, labels=paste("Num. Colp =", round(rez2[1], 1)), adj=0)#
text(1, -6, labels=paste("Num. Para =", round(rez2[2], 1)), adj=0)#
fnn2$pred1 <- c("Colpidium", "Paramecium")[max.col(ppp)]#
fnn2$pred1 <- ifelse(apply(ppp, 1, max)>0.9, fnn2$pred1, "zzz")#
#
plot(train.pp[,1], train.pp[,2],#
	col=as.numeric(as.factor(fnn[,"Species"])),#
	pch=19, cex=0.2,#
	xlab="PCA1", ylab="PCA2")#
points(test.pp[,1:2], col=as.numeric(as.factor(fnn2$pred1))+2, cex=0.2)#
legend("topright", legend=c("Colp. prediction", "Para. prediction", "Not sure"),#
	pch=19, col=c(3, 4, 5), cex=0.5)#
##title(paste(length(ppp[,1]), "of", sum(apply(ppp, 1, max)>0.9), "\nclassifications > 90%"))#
#
rez3 <- apply(t(table(fnn2$pred1, fnn2$Slice, fnn2$Species)[,10:126, 1]),2,mean)#
rez4 <- apply(t(table(fnn2$pred1, fnn2$Slice, fnn2$Species)[,10:126, 2]),2,mean)#
#
text(-3.4, -4, labels=paste("Test vid5"), adj=0)#
text(-3.4, -5, labels=paste("Num. Colp =", round(rez3[1], 1)), adj=0)#
text(-3.4, -6, labels=paste("Num. Para =", round(rez3[2], 1)), adj=0)#
text(-3.4, -7, labels=paste("Not sure =", round(rez3[3], 1)), adj=0)#
text(1, -4, labels=paste("Test vid6"), adj=0)#
text(1, -5, labels=paste("Num. Colp =", round(rez4[1], 1)), adj=0)#
text(1, -6, labels=paste("Num. Para =", round(rez4[2], 1)), adj=0)#
text(1, -7, labels=paste("Not sure =", round(rez4[3], 1)), adj=0)
rm(list=ls())#
library(multicore)#
library(lattice)#
~/work/git/franco/merge morphology and trajectory/example data/trajectory data.csv#
#
tt <- read.csv("~/work/git/franco/merge morphology and trajectory/example data/trajectory data.csv", row.names=1)#
str(tt)#
tt$Trajectory#
tt$Frame#
tt$x#
tt$y#
pp <- read.csv("~/work/git/franco/merge morphology and trajectory/example data/part.dims.csv", row.names=1)#
str(pp)#
pp$Slice
function to match the particles and trajectories in each frame#
PTMatch <- function(frame, tt, pp) {#
	##f = 127#
	f <- frame#
	##print(f)#
	these.tt <- tt[tt$Frame==f,]#
	these.pp <- pp[pp$Slice==f,]#
	plot(these.tt[,c("x", "y")], xlim=c(0,2048), ylim=c(0,2048), col="blue")#
	points(these.pp[,c("Y")], these.pp[,c("X.1")], col="red")#
	mm <- matrix(NA, length(these.tt[,1]), length(these.pp[,1]))#
	for(i in 1:length(these.tt[,1]))#
		for(j in 1:length(these.pp[,1])) {#
			## in the next line it seems there is an error, that x and ys don't match#
			## this is not an error...!#
			mm[i,j] <- sqrt( (these.tt[i,"x"] - these.pp[j,"Y"])^2 + (these.tt[i,"y"] - these.pp[j,"X.1"])^2)#
			##print(c(i,j))#
			}#
	##mm#
	num.parts <- min(c(length(these.tt[,1]), length(these.pp[,1])))#
	mm[order(mm)[num.parts]]#
	rc <- which(mm<=mm[order(mm)[num.parts]], arr.in=T)#
	mf <- cbind(these.tt[rc[1,1],], these.pp[rc[1,2],])#
	for(i in 2:length(rc[,1]))#
		mf <- rbind(mf, cbind(these.tt[rc[i,1],], these.pp[rc[i,2],]))#
	mf#
}
only match where there is are duplicate frames:#
these.frames <- sort(c(unique(pp$Slice), unique(tt$Frame))[duplicated(c(unique(pp$Slice), unique(tt$Frame)))])#
#
rez <- lapply(these.frames, function(x, ...) PTMatch(x, tt, pp))
str(rez)
rez <- do.call("rbind", rez)
str(rez)
rm(list=ls())#
library(multicore)#
library(lattice)#
~/work/git/franco/merge morphology and trajectory/example data/trajectory data.csv#
#
tt <- read.csv("~/work/git/franco/merge morphology and trajectory/example data/trajectory data.csv", row.names=1)#
# str(tt)#
# tt$Trajectory#
# tt$Frame#
# tt$x#
# tt$y#
pp <- read.csv("~/work/git/franco/merge morphology and trajectory/example data/part.dims.csv", row.names=1)#
# str(pp)#
# pp$Slice#
## function to match the particles and trajectories in each frame#
PTMatch <- function(frame, tt, pp) {#
	##f = 127#
	f <- frame#
	##print(f)#
	these.tt <- tt[tt$Frame==f,]#
	these.pp <- pp[pp$Slice==f,]#
	plot(these.tt[,c("x", "y")], xlim=c(0,2048), ylim=c(0,2048), col="blue")#
	points(these.pp[,c("Y")], these.pp[,c("X.1")], col="red")#
	mm <- matrix(NA, length(these.tt[,1]), length(these.pp[,1]))#
	for(i in 1:length(these.tt[,1]))#
		for(j in 1:length(these.pp[,1])) {#
			## in the next line it seems there is an error, that x and ys don't match#
			## this is not an error...!#
			mm[i,j] <- sqrt( (these.tt[i,"x"] - these.pp[j,"Y"])^2 + (these.tt[i,"y"] - these.pp[j,"X.1"])^2)#
			##print(c(i,j))#
			}#
	##mm#
	num.parts <- min(c(length(these.tt[,1]), length(these.pp[,1])))#
	mm[order(mm)[num.parts]]#
	rc <- which(mm<=mm[order(mm)[num.parts]], arr.in=T)#
	mf <- cbind(these.tt[rc[1,1],], these.pp[rc[1,2],])#
	for(i in 2:length(rc[,1]))#
		mf <- rbind(mf, cbind(these.tt[rc[i,1],], these.pp[rc[i,2],]))#
	mf#
}#
#
## only match where there is are duplicate frames:#
these.frames <- sort(c(unique(pp$Slice), unique(tt$Frame))[duplicated(c(unique(pp$Slice), unique(tt$Frame)))])#
#
rez <- lapply(these.frames, function(x, ...) PTMatch(x, tt, pp))#
#
rez <- do.call("rbind", rez)#
#
str(rez)
So I created a pdf of the trajectories and made it transparent in the Keynote presentation.#
dd <- read.csv("~/work/git/franco/merge morphology and trajectory/example data/trajectory data.csv")#
str(dd)
par(mar=c(0,0,0,0))#
plot(dd$y, dd$x,#
	xlim=c(0,2048), ylim=c(2048,0),#
	col=dd$Trajectory,#
	pch=19, cex=0.5)
